<!-- Live Visitor Counter (CountAPI) -->
<div id="visitor-counter" style="font-family:Inter,system-ui,Arial;text-align:center;padding:12px;">
  <div style="font-size:14px;color:#6b7280">ðŸ‘€ Live Visitors</div>
  <div id="visitor-value" style="font-size:28px;font-weight:800;margin-top:6px;color:#1e7a3b">â€”</div>
  <div id="visitor-note" style="font-size:12px;color:#6b7280;margin-top:6px">connectingâ€¦</div>
</div>

<script>
(function(){
  // === CONFIGURE THESE BEFORE PASTING ===
  // Use a unique namespace and key for your site. Replace these.
  const NAMESPACE = 'YOUR_NAMESPACE'; // e.g. 'nutryfix-github-io'
  const KEY = 'visitors';            // e.g. 'visitors'
  // =====================================

  // Helpful: form namespace/key automatically if user left default placeholders
  if(NAMESPACE === 'YOUR_NAMESPACE') {
    console.warn('Visitor counter: Please replace YOUR_NAMESPACE and YOUR_KEY with your actual values.');
    // auto-fill with hostname fallback (works on GitHub Pages)
    try {
      const host = (location.hostname || 'site').replace(/\./g,'-').replace(/:/g,'-');
      // only if user didn't set values
      const autoNs = host.toLowerCase();
      // use auto values
      console.info('Auto-using namespace:', autoNs);
      window.__cc_namespace = autoNs;
      window.__cc_key = KEY === 'visitors' ? 'visitors' : KEY;
    } catch(e){}
  }

  const namespace = window.__cc_namespace || NAMESPACE;
  const key = window.__cc_key || KEY;

  const elValue = document.getElementById('visitor-value');
  const elNote  = document.getElementById('visitor-note');

  // animate number changes
  function animateCount(from, to, el, ms = 600) {
    const start = performance.now();
    const diff = to - from;
    if(diff === 0) { el.textContent = to; return; }
    requestAnimationFrame(function step(now) {
      const t = Math.min(1, (now - start) / ms);
      el.textContent = Math.round(from + diff * t).toLocaleString();
      if (t < 1) requestAnimationFrame(step);
    });
  }

  // call CountAPI 'hit' to increment on page load
  async function hitCounter() {
    try {
      const res = await fetch(`https://api.countapi.xyz/hit/${encodeURIComponent(namespace)}/${encodeURIComponent(key)}`);
      if(!res.ok) throw new Error('Network response not ok');
      const json = await res.json(); // {namespace, key, value}
      const value = Number(json.value || 0);
      animateCount(0, value, elValue, 800);
      elNote.textContent = 'Updated just now';
      return value;
    } catch (err) {
      console.error('Counter hit failed', err);
      elNote.textContent = 'Could not update counter (blocked?)';
      elValue.textContent = 'â€”';
      return null;
    }
  }

  // call CountAPI 'get' to fetch current value (used for polling)
  async function getCounter() {
    try {
      const res = await fetch(`https://api.countapi.xyz/get/${encodeURIComponent(namespace)}/${encodeURIComponent(key)}`);
      if(!res.ok) throw new Error('Network response not ok');
      const json = await res.json();
      const value = Number(json.value || 0);
      // animate from displayed number to fresh number
      const currentText = elValue.textContent.replace(/,/g,'').trim();
      const current = Number(currentText) || 0;
      if(value !== current) animateCount(current, value, elValue, 600);
      elNote.textContent = 'Live';
      return value;
    } catch(err) {
      console.error('Counter get failed', err);
      elNote.textContent = 'Live update unavailable';
      return null;
    }
  }

  // start: increment then poll every 5 seconds
  (async function init(){
    elNote.textContent = 'connectingâ€¦';
    // First, increment the global hit count for this page load
    await hitCounter();
    // then poll every 5 seconds for updates
    setInterval(getCounter, 5000);

    // Optional: refresh on visibility change (when tab becomes active)
    document.addEventListener('visibilitychange', function(){
      if(document.visibilityState === 'visible') {
        getCounter();
      }
    });
  })();

})();
</script>
